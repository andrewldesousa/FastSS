In order to explain this, assume we have two lists: `some_numbers` and `other_numbers`, where

    >>> some_numbers = [1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers

Many beginners would make a copy of `some_numbers` and store it in `other_numbers`, as I did above. However, what you might not know, is that when you do that you actually tell Python that they are the same list. So if you tried to add an item to `some_numbers` and then `print(other_numbers)`, you'd see that the output will include the item you added to `some_numbers`. i.e.:

    >>> some_numbers.append(10)
    >>> print(other_numbers)
    [1, 2, 3, 4, 5, 10]

If you wish to have two independent lists, where adding an item to one doesn't change the other, use this instead:

    >>> some_numbers = [1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers[:]

Now, you can change the lists independently.

    >>> some_numbers.append(10)
    >>> other_numbers.append(20)
    >>> print(some_numbers)
    >>> print(other_numbers)
    [1, 2, 3, 4, 5, 10]
    [1, 2, 3, 4, 5, 20]

**Edit:** As mentioned in the comments by several people, the more readable option for copying is

    >>> some_numbers = [ 1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers.copy()

&#x200B;