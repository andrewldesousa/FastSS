I'm on this subreddit a good bit, and any time anyone mentions wanting to work with data, without fail one of the first 
things that gets brought up is Pandas. I'm not convinced that is the best advice for people who are trying to learn 
Python, and I wanted to bring it up to the community to see what others thought.

Here's an example block of code that a poster might write if they want to open a CSV and show rows where a 
column matches a certain value:

    import csv
    
    f = open('path')
    reader = csv.reader(f)
    
    for row in reader:
        if row[0] == 'some_value':
            print(row)

It might not look like much, but opening a file using the `csv` module exercises a significant number of the fundamental 
aspects of the Python language. Among the highlights we have:

 - importing a module
 - assigning a variable
 - opening a file (using python's `open` builtin)
 - using imported code
 - `for` loops, iteration in general and the syntax for it
 - the concept of a list (because that's what rows are by default)
 - using list indexes to get a value
 - `if`/`else` statements
 - boolean expressions / the `==` equality operator
 - the print function

By slowly writing the code to perform this task and running it, they get exposed to all of these important concepts! We 
could even modify this example to use a `with` statement for the file, and show yet another important piece of Python.

Let's compare that to the same operation in Pandas, from a [very popular stackoverflow answer](https://stackoverflow.com/a/17071908/4453925):

    import pandas as pd
    
    df = pd.read_csv('file path')
    select = df.loc[df['column_name'] == some_value]

Sure, this is less code, and is "easier" as a result, maybe, but even as an experienced Python user, this block of code takes a 
minute to unpack, and what it fundamentally *does* is not immediately obvious. The poster probably copy + pastes it, runs it to see what it *does* and then moves on without any deeper understanding of what it means, programmatically, to search through a dataset for an item. It has the added negatives of doing three other things which are decidedly not good:

 - it renames an import, which has a time and a place, but to a brand new learner is both not obvious and not helpful
 - it shows overloaded behavior of `[]` which is uncommon and potentially confusing if they don't have a good understanding of the slice / `__getitem__` constructs
 - almost every Pandas example I've seen uses the same damn variable name, `df`, for any `DataFrame`, which doesn't do
any good to hammer in the importance of good, descriptive variable names. I'll admit this might be a silly gripe.

This example leads directly on to the next point: Python can be *beautiful*. It is a concise, yet expressive language, and 
one of the most amazing things about it is that the creators have worked hard to make sure it has a certain feel to it: 
when an API is written "pythonically", you can intuitively understand how to work with it, if you are familiar
with how Python works. The `csv` module is no different, and it starts to give users an idea of what that means. 
This is another place where Pandas falls short for the beginner: it does not tend to exemplify this important aspect of the 
Python language.

All this said, Pandas is an awesome, powerful library and it has an important place in data science and Python in general. 
When you work with data  *all the time*, having a very concise way to express your data manipulation is 
both helpful and desirable. However, I do not believe that it should be enthusiastically recommended to new 
users of Python because pointing someone towards Pandas and telling them to use it when they work with 
data is not a useful or effective way for folks to learn about the fundamental underpinnings of the Python language.