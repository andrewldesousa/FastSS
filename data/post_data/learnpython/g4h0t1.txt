So, I'm doing a course on Algorithms and our  graded assignments wanted us to have a 3 way partition of the quicksort. I thought it would take me like an hour to solve the problem. Well, fast forward to one week later I was still on it. I used stack overflow, read solutions and nothing clicked. I was literally clueless and stuck on a specific case and ran out of ideas. Today, a new technique just clicked and I tried working on it(but I was almost sure it wouldn't work just like the things that I've tried during the entire week but I tried anyways). After some debugging, I've tested and it's finally working. I don't know why I am sharing this but I feel like I can finally solve a problem and it was so hard for me.

EDIT: I never expected to get so many upvotes, thanks a lot guys. But, I gotta be honest with yall. I tried some test cases and looks like I still got some work to do. Oh well, back to it again

EDIT2: This time I did it for real. Submitted the assignment and got marks. Never give up guys

Exact problem was:

3 way partition of quicksort where we would want to mutate the python list and return two indexes m1, m2 such that the left side of m1 have elements that are less than X and the right side of m2 have elements that are greater than X (X being the first element of the list). That's it! And the two way partition where it just returned a single index to the left of which are elements greater than or equal to X was already implemented in the starter code.

&#x200B;

Here's an example of what it would look like:

input:

a = \[5, 1, 8, 5, 3, 2, 5, 8, 3, 5, 2, 5\]

&#x200B;

After the function call, array would be similar to

\[2, 1, 3, 2, 3, 5, 5, 5, 5, 5, 8, 8\]

&#x200B;

and m1, m2 will be 5, 9

&#x200B;

&#x200B;

&#x200B;