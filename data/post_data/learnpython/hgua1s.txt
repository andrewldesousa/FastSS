Object oriented programming is just one of many schools of thought, yet many beginners get the impression that OOP is the pinnacle of Python programming. Then they go to this sub and ask "how to learn/practice classes/OOP", which is like "give me a nail for my hammer".  They ask that because they have not yet run into any situation where using classes OOP style is actually a solution to their problem. In fact, in my daily work, while I write lots of classes, very rarely has the reason for doing so anything to do with OOP!

That's why I propose a small, non-exhaustive list of things for beginner Python devs to learn and do that will pay off long before learning OOP will.

Note that in the course of learning these things, classes will organically come up several times where they are actually useful, not just because of the moral imperative that one ought to use classes.

**Typing**

[Typing](https://docs.python.org/3/library/typing.html) in concert with a static [type checker](http://mypy-lang.org/) will allow you to catch certain errors before even running the program. They also make your code easier to reason about for other people. You can also autogenerate docstrings for typed functions and methods.

Typing really becomes useful when you start making use of [dataclasses](https://docs.python.org/3/library/dataclasses.html). Instead of mindlessly passing dictionaries around, you can now express that you want data with certain fields of certain types. With libraries like [Pydantic](https://pydantic-docs.helpmanual.io/) or  [Dacite](https://github.com/konradhalas/dacite) you can now also validate your data at runtime which is huge if you get data from an external source. The framework [FastAPI](https://fastapi.tiangolo.com/) will even automatically generate API documentation from your types.

**Testing**

Learn to write automated tests and develop the discipline to actually write them.  [Learn Test Driven Development](https://www.obeythetestinggoat.com/pages/book.html#toc). It forces you to write testable code and it's a lot harder to write bad code under the constraint of it being testable.

**Use linters and formatters**

This is really low hanging fruit. I suggest [Black](https://github.com/psf/black) for formatting and [https://flake8.pycqa.org/en/latest/](https://flake8.pycqa.org/en/latest/)  for linting. Run both regularly on your code and fix the things flake8 complains about. Your code will be better in quality and easier for others (and yourself in 3 months) to read.

**Read a styleguide**

Like [the Google Python Styleguide](http://google.github.io/styleguide/pyguide.html) and read all of it.

**Read the official Python documentation. Practice reading documentation as opposed to watching tutorials**

At some point in time, you should have read all of this [https://docs.python.org/3/tutorial/index.html](https://docs.python.org/3/tutorial/index.html)

Once per week  read up on one of the [built-in functions](https://docs.python.org/3/library/functions.html).

Occasionally, pick a random part of the  [standard library](https://docs.python.org/3/library/index.html) and try to find something useful in there. You'd be surprised!

**Read about application-level software architecture**

I recommend  [Architecture Patterns with Python](http://www.cosmicpython.com/book/preface.html).

**Expose yourself to a well-balanced mix of schools of thought about programming**

That includes but is not limited to OOP, functional programming, domain driven design, looking at different type systems and a lot more.

Edit: typo