Hello all,

I recently wrote a post about [getting my first paid job on Upwork](https://www.reddit.com/r/learnpython/comments/jrwi6d/just_completed_my_first_job_on_upwork/).  I got rehired by the same person to do even more work with the conversation going like this:

Client: This work is great.  Now, can we do the same for everything please?

Me: As far as I'm aware, all of the fields are filled.  Could you give me some more detail?

Client: *sends me a search page* You see all this info here? All 39 pages? Could we do exactly the same for all of these please? (client said it much nicer than this)

To avoid any confusion, I got asked to scrape a whole website of financial data and condense it into a spreadsheet.  This was a pain in the tits for the following reasons:

* The pages in the first post were static.  This is a dynamically loaded website.

* It's a lot more data - it ended up being over 18,000 data points.

* It needed a lot more code.

Long story short, I managed this and got it in on time and got paid! I enjoyed it so much I ended up making it a "data pipeline" (if you can even call it that) where it scrapes the data, passes it to a function which saves it to a CSV, and then passes the CSV to Pandas to have it cleaned and formatted.  All in one Jupyter Notebook cell!

5 months ago, I didn't know a single thing about code and now I can do this.  It's amazing and I'd love to be able to give some people a realistic opinion, as a beginner, to other people starting out. 

**Tutorials are a bit misleading**

As with all people learning, I'm sure you've probably watched tons of videos.  Whilst they're useful, it can be very disheartening watching somebody cane out code in 10 minutes which takes you 3 hours.

[Here's a video which made me feel better](https://www.youtube.com/watch?v=uIOhRD9J9oU&)

I saw this as I was transitioning out tutorial hell and it was very sobering how a lot of what he said happened.  I spent a lot more time searching for solutions, and running the same blocks of code with minor adjustments over and over again until it did what I want than I did watching my code work.  Also, actual time spend coding was a lot less than checking for ridiculously small things like unmatched brackets.

My code was literally trash and a mess which didn't make any sense whilst I was doing the job.  Huge chunks of code which worked and commented out as I was trying to fix things, code which didn't work and I forgot to delete, random comments I made whilst I was angry.  My code *worked* though and it's something the client never sees.  After I finished, I took the code and made it WAY cleaner just in case anybody would want to see it.

Judging from what more experienced people have said, this is the normal cycle of programming and thinking you're going to one-shot code is the mindset to failure.  Programming is about problem solving and problem solving involves running into a lot of problems and when I say problem solving, I mean a lot less "If Jack has 3 apples and Jill has X-n^2 apples, come up with an algorithm which sorts out a list of even numbers and every odd number produces the word 'lmao'".  I would say problem solving can be summarised with 'figuring out why your code isn't doing what you want it to do'. 

**Googling stuff and copying code is normal**

I used to feel like such a joke googling stuff for solutions and being unable to rattle stuff of the top of my head.  Same with copying code other people have done and subbing my own variables in there.

After about 2 months of doing this, this is pretty much what programming is like.  So don't feel bad if you do - this is normal.  Nobody feels guilty when they copy a recipe off youtube to impress somebody and nobody should feel bad for taking publicly available code and adapting it for their own purposes (within reason).

**Getting out of "tutorial hell"**

I spent about 4 months in this stage.  I've done three courses overall and felt the same all the way through, 'me following along means I'm learning!'.  Unfortunately, this isn't true.  I ended up wondering why people were doing stuff the way they were doing it rather than understanding what was going on.

One of the most asked questions on here is 'I'm a beginner.  What should I build?' and usually people say the same projects which are projects 100 other people have documented and fine tuned. The obsession with using some sort of phrase involving the word 'build' or 'building' gets bandied a lot around here and I do think the concept is poorly explained although is correct.  I think the more apt advice for getting out of tutorial hell is:

"Come up with your own ideas and then build them"

Building what you're interested in and is useful to you is very different than churning out programs hundreds of other people have done and is the beauty of being self taught - getting over that hump and generating your own ideas is a steep, very rewarding learning curve.  Ultimately, from what I've learn from tutorials, is that zero courses teach you how to be creative and if you can't be creative, programming is really really hard.

My example projects before this huge one above was a password manager and a program to automate my computer to begin mine crypto when my electricity is cheap.  I also made loads of other stupid shit like a bot which spams annoying messages in chat channels with a sleep timer to avoid getting timed out, spamming email boxes of people who have sent me junk mail with scary pictures.  I came to the conclusion that all of the stuff I *like* to build is incredibly troll and that's totally cool as long as I don't use my powers for evil on a grand scale.

Which brings me to my next point...

**Have some fun**

Learning Python and programming always felt like a race to me.  "How much time will it take for me to become a paid, full time programmer?" was always on my mind and, to be honest, it ruined a lot of the learning for me.  I've had a lot of down days because it felt like I was "slow" compared to these people on youtube who became Software Engineers for the FAANG groups in 6 month, or these 15 year old kids winning Google coding competitions. I felt like I was "missing out" on earning a lot of money because of a lack of ability, rather than realising the only person that sets the goals posts is me.  Comparison is the thief of joy, after all.

Putting yourself under a lot of pressure to get somewhere is definitely a path to burning out.  My missus told me the other week that I "looked tired" and when I looked up at the clock, I had been sat at my computer for 6 hours without a break.  Whilst I don't disparage working hard, I do disparage disconnecting from your health.

Take a break.  Go for a run.  Spend some time with your family.  Build stupid shit which nobody will ever see every once in a while.

**Build your Github as soon as you can**

This is something I learnt far too late.  EDIT: Elaborated on below:

I say build a Github because a lot of people's goals are to become a software engineer or developer and a lot of people are also self taught although there's no really "good" way of showcasing your projects and what you've done on your resume/cv. Github is what developers use as part of their pipelines and a lot of jobs expect you to be able to use, so if you have a Github showcasing your work it shows your portfolio and suggests you at least know what Github is.

If you start late, like I did, you'll have a bunch of concentrated commits into your repository which doesn't look very professional and isn't visually very encouraging. A steady stream of projects over time shows that you've put a bunch of effort into either submitting projects or contributing towards other projects and helps boost the strength of your application.

**Your career aspirations can change, and that's okay too**

I have a background in chemistry and was enamoured with the idea of becoming a data scientist.  What I learnt from doing python is two things -

* I really like collecting data and automating things.

* I really hate analysing data.

And that's alright with me.  I know what jobs I should be looking for now!

Of course, this is all just my opinion based on personal experience.  I always recommend going out there and getting your own.  I hope this was helpful to some beginners!

EDIT: Wow, holy shit.  This is a lot bigger than I thought.  Thank you for all the awards and the nice comments.  Also, big thank you to much more experienced people weighing in - it's what makes this community!