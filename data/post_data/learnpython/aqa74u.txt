Inspired by /u/ skiutoss 's post, I thought I'd add my own lessons.

Some other people probably got more from their years than I did - I started young(12-14) and I'm stubborn. But I somehow managed to bootstrap a 25+ person company, and have avoided working for anyone but myself and a few clients since I was 15. The only office I've really set foot in is the one I ran. Here are some things I've learned.

Most of this is related to SAAS services written in python.

* Your best programs and projects will be solving problems that you yourself have. If you're lucky, other people will have that problem too. If you're really lucky, they'll pay for your solution.
     * Your best libraries will be solving problems you have while programming. Write them, learn them, love them.

* Your past work is your best resource.

   * Because of how you code, you're likely to encounter similar issues. Standing examples of "how I did this" are tremendous resources.

   * Especially if you're a contract worker, developing your own helper libraries that each contract explicitly gives you the rights to (I offer a transferable license to my prior work, and myself ownership) is worth it's weight in gold. It grows and grows and grows.

* Don't re-invent the wheel, but don't use a dumptruck to move a toothpick just because it exists.

* Coding structure (classes, inheritance, etc) are not for your software as-is, it's for what it will become.
   * You will always be hung from your largest monolithic function.
   * When one function is made to do X and you already have a worse function to do X, the old function is to be deleted immediately.
* Misleading variable names are to be exterminated on sight.

* Consistent variable names will save you huge amounts of time, reduce bugs, and save time for coders you onboard.
     * Example: product_title in the function that determines the title, product_title in the dict it writes to a queue, product_title in the database, product_title in the json from the ajax call from the website, product_title as the javascript variable storing it on the site.

* Every piece of code should be written with a thought to how hard it will be to replace some day.

    * This is where well defined objects, microservices, and redis queues of tasks/objects shine.

* If you can't code to scale(because time constraints), code to buy yourself time to do so in the future.
    * As an example: If you are directly writing to a SQL database and it has the potential to be slow in the future, write the needed data to a redis queue and have workers execute it. When it starts to get hairy you can tick up the number of threads while you figure out how to speed up the DB or migrate to a new one.


* "Clever" code should be readable. If it's not, it's a detriment not a benefit. Coding is not your opportunity to show how much smarter you are than everyone else(who will have to maintain your shit)

* No, you won't remember. TODO lists and comments are vital.


* It is rare that you have a legitimate reason to be handwriting SQL queries.

* You will always need a dev environment. Develop scripts for setting them up.

* One of the greatest skills a programmer can have(especially one who works on early stage start-ups) is figuring out which corners *can* and *can't* be cut, and setting up the project to be easily fixed in the future.


* The less billing code you are writing, the better.
    * Significant issues in billing and backups are unforgivable tier errors. Clients and users will forgive downtime, they will not forgive their card being billed at random.

    * There are companies who handle things like subscriptions. Use them. Do not write your own.

* Don't just *have* backups, have an environment for testing those backups. Know how you're going to pause new incoming data when they're applied. Have a system that blows your phone the fuck up if they fail.
    * In many cases, a failed backup is a company-ender. It's that serious.

    * A master/slave configuration is not a backup. It will save you from hard drives roasting, not a sloppy "UPDATE" query.

    * Come to terms with the mortality of your hardware.

* Do not trust user input. Not their cookie, not their form input, and *never* their uploads. Javascript validation is for telling the user their input is wrong, not for keeping your data clean. That is done server side.